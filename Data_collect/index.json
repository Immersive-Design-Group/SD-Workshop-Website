'use strict';

const mysql = require('mysql2/promise');
const crypto = require('crypto');

/* ===================== 配置（优先 env，缺省回退到你提供的值） ===================== */
const DEFAULTS = {
  HOST: 'rm-wz9ri3mmunqbr302w.mysql.rds.aliyuncs.com',
  PORT: '3306',
  USER: 'IDG',
  PASS: 'MAKE555!',         // ⚠️ 仅联调兜底；跑通后请改为仅用环境变量
  DB:   'sd_workshop'
};

const dbConfig = {
  host: process.env.DB_HOST || DEFAULTS.HOST,
  port: parseInt(process.env.DB_PORT || DEFAULTS.PORT, 10),
  user: process.env.DB_USER || DEFAULTS.USER,
  password: process.env.DB_PASS || DEFAULTS.PASS,
  database: process.env.DB_NAME || DEFAULTS.DB,
  charset: 'utf8mb4',
  timezone: '+08:00'
};

/* ===================== 连接池（实例复用） ===================== */
let pool = null;
function getPool() {
  if (!pool) {
    pool = mysql.createPool({
      ...dbConfig,
      waitForConnections: true,
      connectionLimit: 10,
      queueLimit: 0,
      connectTimeout: 5000,
      enableKeepAlive: true,
      keepAliveInitialDelay: 0
    });
    console.log('DB_TARGET =', { host: dbConfig.host, port: dbConfig.port, db: dbConfig.database, user: dbConfig.user });
  }
  return pool;
}

/* ===================== 工具函数 ===================== */
function parseMaybeBufferEvent(ev) {
  if (!ev) return {};
  if (typeof ev === 'string') { try { return JSON.parse(ev); } catch { return {}; } }
  if (Buffer.isBuffer && Buffer.isBuffer(ev)) { try { return JSON.parse(ev.toString('utf8')); } catch { return {}; } }
  if (ev && ev.type === 'Buffer' && Array.isArray(ev.data)) {
    try { return JSON.parse(Buffer.from(ev.data).toString('utf8')); } catch { return {}; }
  }
  return ev;
}

function safeJSONParse(s) {
  if (!s) return {};
  try { return typeof s === 'string' ? JSON.parse(s) : s; } catch { return {}; }
}

function parseQueryString(qs) {
  if (!qs || typeof qs !== 'string') return {};
  const out = {};
  const str = qs.startsWith('?') ? qs.slice(1) : qs;
  for (const seg of str.split('&')) {
    if (!seg) continue;
    const [k, v] = seg.split('=');
    const key = decodeURIComponent(k || '').trim();
    const val = decodeURIComponent((v || '').trim());
    if (!key) continue;
    if (out[key] === undefined) out[key] = val;
    else if (Array.isArray(out[key])) out[key].push(val);
    else out[key] = [out[key], val];
  }
  return out;
}

function ok(headers, data, code = 200) {
  return { statusCode: code, headers, body: JSON.stringify(data) };
}

function err(headers, message, code = 500, extra) {
  const payload = extra ? { error: message, ...extra } : { error: message };
  return { statusCode: code, headers, body: JSON.stringify(payload) };
}

/* ===================== 主入口（Buffer 安全解析 + 路由解析） ===================== */
exports.handler = async (rawEvent, context) => {
  const ALLOWED_ORIGINS = new Set([
    'https://sustechsdworkshop.com',
    'https://www.sustechsdworkshop.com',
    'https://immersive-design-group.github.io',
    'https://immersive-design-group.github.io/SD-Workshop-Website',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://localhost:3000',
    'http://127.0.0.1:3000'
  ]);
  
  function corsHeaders(event) {
    // 完全移除CORS头部，让浏览器处理
    return {
      'Content-Type': 'application/json'
    };
  }

  const event = parseMaybeBufferEvent(rawEvent) || {};
  try { console.log('EVENT_PARSED =', JSON.stringify(event)); } catch {}

  const h0 = event.headers || event.Headers || {};
  const headersLower = {};
  for (const k in h0) headersLower[k.toLowerCase()] = h0[k];

  // Method
  const methodRaw =
    event.httpMethod ||
    event.method ||
    event.requestContext?.http?.method ||
    headersLower['x-fc-request-method'] ||
    headersLower['x-forwarded-method'] ||
    headersLower['x-http-method-override'] ||
    'GET';
  const method = String(methodRaw).toUpperCase();

  // Path
  const headerPath =
    headersLower['x-fc-request-uri'] ||
    headersLower['x-fc-request-path'] ||
    headersLower['x-forwarded-uri'] ||
    headersLower['x-original-uri'] ||
    headersLower['x-rewrite-url'];

  const pathCandidate =
    event.rawPath ||
    headerPath ||
    event.path ||
    event.requestPath ||
    event.resourcePath ||
    event.requestContext?.http?.path ||
    '/';

  const qIdx = String(pathCandidate).indexOf('?');
  const rawPath = (qIdx >= 0 ? pathCandidate.slice(0, qIdx) : pathCandidate) || '/';
  const path = String(rawPath).toLowerCase();

  // Query
  const rawQuery =
    event.rawQueryString ||
    headersLower['x-forwarded-query'] ||
    headersLower['x-original-query'] ||
    headersLower['x-fc-query'] ||
    (qIdx >= 0 ? String(pathCandidate).slice(qIdx + 1) : '');

  const qsObj =
    event.queryStringParameters ||
    event.queryParameters ||
    event.queries ||
    parseQueryString(rawQuery) ||
    {};

  // Body（考虑 base64）
  let body = {};
  if (event.body) {
    try {
      const bodyText = event.isBase64Encoded
        ? Buffer.from(event.body, 'base64').toString('utf8')
        : (typeof event.body === 'string' ? event.body : JSON.stringify(event.body));
      body = safeJSONParse(bodyText);
    } catch { body = {}; }
  }

  const headersBase = corsHeaders(event);

  if (method === 'OPTIONS') return { statusCode: 200, headers: headersBase, body: '' };

  try {
    // 路由
    if (path === '/api/ping' && method === 'GET') {
      return ok(headersBase, { ok: true });
    }

    if (path === '/api/health' && method === 'GET') {
      return await handleHealth(headersBase);
    }

    // 调试：查看当前库与表结构
    if (path === '/api/_schema' && method === 'GET') {
      return await handleSchema(headersBase);
    }

    if (path === '/api/bookings' && method === 'GET') {
      event.queryStringParameters = qsObj;
      return await handleGetBookings(event, headersBase);
    }

    if (path === '/api/bookings' && method === 'POST') {
      return await handleCreateBooking(body, headersBase);
    }

    if (path === '/api/send-otp' && method === 'GET') {
      event.queryStringParameters = qsObj;
      return await handleSendOTP(event, headersBase);
    }

    if (path === '/api/delete-booking' && method === 'POST') {
      return await handleDeleteBooking(body, headersBase);
    }

    return err(headersBase, 'Not Found', 404, { debug: { path, method } });
  } catch (e) {
    console.error('Handler error:', e);
    return err(headersBase, 'Internal Server Error', 500);
  }
};

/* ===================== 业务实现（已适配你的表结构） ===================== */

// 健康检查（DB）
async function handleHealth(headers) {
  try {
    const pool = getPool();
    const [rows] = await pool.query('SELECT 1 AS ok');
    return ok(headers, { db: rows[0]?.ok === 1 });
  } catch (e) {
    console.error('health db error:', e && e.message);
    return err(headers, String(e && e.message), 500);
  }
}

// 调试：返回当前库与 bookings 表结构
async function handleSchema(headers) {
  try {
    const pool = getPool();
    const [[dbRow]] = await pool.query('SELECT DATABASE() AS db, CURRENT_USER() AS user');
    const [cols] = await pool.query('SHOW COLUMNS FROM `bookings`');
    return ok(headers, { using_db: dbRow.db, user: dbRow.user, columns: cols });
  } catch (e) {
    console.error('Schema debug error:', e && e.message);
    return err(headers, 'Schema debug failed', 500, { detail: String(e && e.message) });
  }
}

// GET /api/bookings?from=YYYY-MM-DD&to=YYYY-MM-DD
async function handleGetBookings(event, headers) {
  const qs = event.queryStringParameters || {};
  const from = qs.from;
  const to = qs.to;

  if (!from || !to) {
    return err(headers, 'Missing from/to parameters', 400);
  }

  const pool = getPool();
  try {
    const [rows] = await pool.execute(
      `SELECT
          \`id\`,
          \`booking_id\`,
          \`name\`,
          \`email\`,
          \`purpose\`,
          \`device\`,
          \`model\`,
          \`date\`,
          \`start_time\`,
          \`end_time\`,
          \`total_slots\`,
          \`total_hours\`,
          \`status\`,
          \`created_at\`
       FROM \`bookings\`
       WHERE \`date\` BETWEEN ? AND ?
         AND \`status\` = 'CONFIRMED'
       ORDER BY \`date\`, \`start_time\``,
      [from, to]
    );
    return ok(headers, { bookings: rows }, 200);
  } catch (e) {
    console.error('Get bookings error:', e && e.message);
    return err(headers, 'Query failed', 500, { detail: String(e && e.message) });
  }
}

// POST /api/bookings
// body: { name, email, purpose, slots: [{ device, model?, date, start_time, end_time, slots, hours }] }
async function handleCreateBooking(body, headers) {
  console.log('handleCreateBooking called with body:', JSON.stringify(body));
  
  const { name, email, purpose, slots } = body;

  if (!name || !email || !purpose || !Array.isArray(slots) || slots.length === 0) {
    console.log('Missing required fields:', { name, email, purpose, slots });
    return err(headers, 'Missing required fields', 400);
  }

  console.log('Getting database pool...');
  const pool = getPool();
  console.log('Database pool obtained');

  try {
    console.log('Starting conflict detection...');
    // 冲突检测（用 device + date + 时间段 + status=CONFIRMED）
    for (const slot of slots) {
      console.log('Checking conflicts for slot:', JSON.stringify(slot));
      const [conflicts] = await pool.execute(
        `SELECT \`id\` FROM \`bookings\`
         WHERE \`device\` = ? AND \`date\` = ? AND \`status\` = 'CONFIRMED'
           AND (
             (\`start_time\` < ? AND \`end_time\` > ?) OR
             (\`start_time\` < ? AND \`end_time\` > ?) OR
             (\`start_time\` >= ? AND \`end_time\` <= ?)
           )`,
        [
          slot.device || slot.equipment, slot.date,
          slot.start_time, slot.start_time,
          slot.end_time,   slot.end_time,
          slot.start_time, slot.end_time
        ]
      );
      console.log('Conflicts found:', conflicts.length);
      if (conflicts.length > 0) {
        console.log('Time slot conflict detected');
        return err(headers, 'Time slot conflict', 409);
      }
    }
    console.log('No conflicts found, proceeding with insertion...');

    // 插入
    console.log('Starting insertion process...');
    const ids = [];
    const slotsJson = JSON.stringify(slots); // 保存原始 slots
    console.log('Slots JSON:', slotsJson);
    
    for (const slot of slots) {
      console.log('Processing slot for insertion:', JSON.stringify(slot));
      const bookingId = crypto.randomUUID().replace(/-/g, '');
      const device = slot.device || slot.equipment; // 兼容前端旧字段名
      const model = slot.model ?? '';

      const totalSlots = Number(slot.slots ?? 1);
      const totalHours = Number(slot.hours ?? 0);

      console.log('Inserting booking with ID:', bookingId);
      const [res] = await pool.execute(
        `INSERT INTO \`bookings\`
           (\`booking_id\`, \`name\`, \`email\`, \`purpose\`,
            \`device\`, \`model\`, \`date\`, \`start_time\`, \`end_time\`,
            \`total_slots\`, \`total_hours\`,
            \`status\`, \`created_at\`, \`slots_json\`)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'CONFIRMED', NOW(), ?)`,
        [
          bookingId, name, email, purpose,
          device, model, slot.date, slot.start_time, slot.end_time,
          totalSlots, totalHours,
          slotsJson
        ]
      );
      console.log('Insert result:', res);
      ids.push(res.insertId);
    }
    console.log('All insertions completed, booking IDs:', ids);

    return ok(headers, { success: true, bookingIds: ids, message: '预约创建成功' }, 201);
  } catch (e) {
    console.error('Create booking error:', e);
    return err(headers, 'Failed to create booking', 500, { detail: String(e && e.message) });
  }
}

// GET /api/send-otp?email=...&id=...
async function handleSendOTP(event, headers) {
  const qs = event.queryStringParameters || {};
  const email = qs.email;
  const id = qs.id;

  if (!email || !id) {
    return err(headers, 'Missing email or id', 400);
  }

  const pool = getPool();

  try {
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const expiry = new Date(Date.now() + 10 * 60 * 1000); // 10 分钟

    const [result] = await pool.execute(
      `UPDATE \`bookings\` SET \`otp\` = ?, \`otp_expiry\` = ?
       WHERE \`id\` = ? AND \`email\` = ? AND \`status\` = 'CONFIRMED'`,
      [otp, expiry, id, email]
    );

    if (result.affectedRows === 0) {
      return err(headers, 'Booking not found', 404);
    }

    console.log(`OTP for ${email}: ${otp}`);
    return ok(headers, { success: true, message: 'OTP 已发送到邮箱', otp }, 200);
  } catch (e) {
    console.error('Send OTP error:', e);
    return err(headers, 'Failed to send OTP', 500);
  }
}

// POST /api/delete-booking { email, id, otp }
async function handleDeleteBooking(body, headers) {
  const { email, id, otp } = body;

  if (!email || !id || !otp) {
    return err(headers, 'Missing required fields', 400);
  }

  const pool = getPool();

  try {
    const [rows] = await pool.execute(
      `SELECT \`id\` FROM \`bookings\`
       WHERE \`id\` = ? AND \`email\` = ? AND \`otp\` = ? AND \`otp_expiry\` > NOW() AND \`status\` = 'CONFIRMED'`,
      [id, email, otp]
    );
    if (rows.length === 0) {
      return err(headers, 'Invalid or expired OTP', 400);
    }

    await pool.execute(
      `UPDATE \`bookings\` SET \`status\` = 'CANCELLED', \`cancelled_at\` = NOW()
       WHERE \`id\` = ? AND \`email\` = ?`,
      [id, email]
    );

    return ok(headers, { success: true, message: '预约已取消' }, 200);
  } catch (e) {
    console.error('Delete booking error:', e);
    return err(headers, 'Failed to delete booking', 500);
  }
}